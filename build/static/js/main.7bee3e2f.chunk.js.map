{"version":3,"sources":["MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["MapContainer","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","dist","google","props","initialCenter","center","zoom","positions","map","pos","name","position","coords","React","Component","GoogleApiWrapper","apiKey","App","state","origen","destino","lat","lng","_this2","className","Grid_default","container","spacing","item","xs","Input_default","placeholder","onChange","e","setState","target","Button_default","onClick","id","src_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAGaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAACC,EAAA,IAAD,CACEC,OAAQb,KAAKc,MAAMD,OACnBE,cAAef,KAAKc,MAAME,OAC1BC,KAAM,IAELjB,KAAKc,MAAMI,UAAUC,IAAI,SAAAC,GAAG,OAC3BX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQL,IAAKa,EAAIC,KAAMA,KAAMD,EAAIC,KAAMC,SAAUF,EAAIG,gBAT/D3B,EAAA,CAAkC4B,IAAMC,WAgBzBC,6BAAiB,CAC9BC,OAAQ,IADKD,CAEZ9B,GC6CYgC,oNA1DbC,MAAQ,CACNC,OAAQ,GACRC,QAAS,GACTb,UAAW,CACT,CACEG,KAAM,OACNE,OAAQ,CAAES,IAAK,UAAWC,KAAM,YAElC,CACEZ,KAAM,eACNE,OAAQ,CAAES,IAAK,UAAWC,KAAM,uFAK7B,IAAAC,EAAAlC,KACP,OACES,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAM2B,WAAS,EAACC,QAAS,IACvB7B,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAM6B,MAAI,EAACC,GAAI,GACb/B,EAAAC,EAAAC,cAAA,UAAQwB,UAAU,cAChB1B,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CACEgC,YAAY,SACZC,SAAU,SAAAC,GACRV,EAAKW,SAAS,CAAEf,OAAQc,EAAEE,OAAOtC,WAGrCC,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CACEgC,YAAY,UACZC,SAAU,SAAAC,GACRV,EAAKW,SAAS,CAAEd,QAASa,EAAEE,OAAOtC,WAGtCC,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,CACEsC,QAAS,cADX,UAOAvC,EAAAC,EAAAC,cAAA,sBAAcX,KAAK6B,MAAMC,QACzBrB,EAAAC,EAAAC,cAAA,uBAAeX,KAAK6B,MAAME,WAG9BtB,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAM6B,MAAI,EAACC,GAAI,GACb/B,EAAAC,EAAAC,cAAA,OAAKsC,GAAG,SACNxC,EAAAC,EAAAC,cAACuC,EAAD,CACEhC,UAAWlB,KAAK6B,MAAMX,UACtBF,OAAQ,CAAEgB,IAAK,UAAWC,KAAM,wBAjD9BR,cCKE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7bee3e2f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, Marker, GoogleApiWrapper } from \"google-maps-react\";\n\nexport class MapContainer extends React.Component {\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        initialCenter={this.props.center}\n        zoom={14}\n      >\n        {this.props.positions.map(pos => (\n          <Marker key={pos.name} name={pos.name} position={pos.coords} />\n        ))}\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"\"\n})(MapContainer);\n","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Input from \"@material-ui/core/Input\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Map from \"./MapContainer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    origen: \"\",\n    destino: \"\",\n    positions: [\n      {\n        name: \"SOMA\",\n        coords: { lat: 37.778519, lng: -122.40564 }\n      },\n      {\n        name: \"Dolores park\",\n        coords: { lat: 37.759703, lng: -122.428093 }\n      }\n    ]\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid container spacing={24}>\n          <Grid item xs={2}>\n            <header className=\"App-header\">\n              <Input\n                placeholder=\"Origen\"\n                onChange={e => {\n                  this.setState({ origen: e.target.value });\n                }}\n              />\n              <Input\n                placeholder=\"Destino\"\n                onChange={e => {\n                  this.setState({ destino: e.target.value });\n                }}\n              />\n              <Button\n                onClick={() => {\n                  debugger;\n                }}\n              >\n                Buscar\n              </Button>\n              <div>origen: {this.state.origen}</div>\n              <div>destino: {this.state.destino}</div>\n            </header>\n          </Grid>\n          <Grid item xs={8}>\n            <div id=\"mapid\">\n              <Map\n                positions={this.state.positions}\n                center={{ lat: 37.778519, lng: -122.40564 }}\n              />\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}